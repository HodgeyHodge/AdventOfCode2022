live_coords = [
    ((3999724, 2000469), (4281123, 2282046)),
    ((3995530, 8733), (3321979, -692911)),
    ((3016889, 2550239), (2408038, 2645605)),
    ((3443945, 3604888), (3610223, 3768674)),
    ((168575, 491461), (1053731, -142061)),
    ((2820722, 3865596), (3191440, 3801895)),
    ((2329102, 2456329), (2408038, 2645605)),
    ((3889469, 3781572), (3610223, 3768674)),
    ((3256726, 3882107), (3191440, 3801895)),
    ((3729564, 3214899), (3610223, 3768674)),
    ((206718, 2732608), (-152842, 3117903)),
    ((2178192, 2132103), (2175035, 2000000)),
    ((1884402, 214904), (1053731, -142061)),
    ((3060435, 980430), (2175035, 2000000)),
    ((3998355, 3965954), (3610223, 3768674)),
    ((3704399, 3973731), (3610223, 3768674)),
    ((1421672, 3446889), (2408038, 2645605)),
    ((3415633, 3916020), (3191440, 3801895)),
    ((2408019, 2263990), (2408038, 2645605)),
    ((3735247, 2533767), (4281123, 2282046)),
    ((1756494, 1928662), (2175035, 2000000)),
    ((780161, 1907142), (2175035, 2000000)),
    ((3036853, 3294727), (3191440, 3801895)),
    ((53246, 3908582), (-152842, 3117903)),
    ((2110517, 2243287), (2175035, 2000000)),
    ((3149491, 3998374), (3191440, 3801895))
]
live_intersect = 2000000

test_coords = [
    ((2, 18), (-2, 15)),
    ((9, 16), (10, 16)),
    ((13, 2), (15, 3)),
    ((12, 14), (10, 16)),
    ((10, 20), (10, 16)),
    ((14, 17), (10, 16)),
    ((8, 7), (2, 10)),
    ((2, 0), (2, 10)),
    ((0, 11), (2, 10)),
    ((20, 14), (25, 17)),
    ((17, 20), (21, 22)),
    ((16, 7), (15, 3)),
    ((14, 3), (15, 3)),
    ((20, 1), (15, 3))
]
test_intersect = 10

def manhattan(p, q):
    return abs(q[0] - p[0]) + abs(q[1] - p[1])

def part_one(coords, intersect):
    for c in coords:
        s = c[0]
        b = c[1]
        distance = manhattan(s, b)
        if s[1] >= intersect and s[1] - distance <= intersect:
            print(f'{(s[0], s[1], distance)} causes blocking from {s[0] - (intersect - s[1] + distance)} to {s[0] + (intersect - s[1] + distance)}')
        if s[1] <= intersect and s[1] + distance >= intersect:
            print(f'{(s[0], s[1], distance)} causes blocking from {s[0] - (s[1] + distance - intersect)} to {s[0] + (s[1] + distance - intersect)}')

# part one

part_one(test_coords, test_intersect) #26 (from -2 to 24, less 1 for the beacon itself at (2, 10))
part_one(live_coords, live_intersect) #5176944 (from -614713 to 4562231, less 1 for the beacon itself at (2175035, 2000000))

# part two

def part_two(coords, intersect):
    for c in coords:
        for d in coords:
            if c[0][0] <= d[0][0] and c != d:
                if manhattan(c[0], d[0])  - manhattan(c[0], c[1]) - manhattan(d[0], d[1]) == 2: # by inspecting pairs differing by 2 more than their combined distance, can pin down an open spot
                    print((c[0][0], c[0][1]), manhattan(c[0], c[1]), (d[0][0], d[0][1]), manhattan(d[0], d[1]))


part_two(test_coords, test_intersect)
part_two(live_coords, live_intersect)


# (3016889, 2550239) 704217 (3729564, 3214899) 673116
# (3036853, 3294727) 661755 (3735247, 2533767) 797597

# answer: 
# (x - 3016889) + (y - 2550239) = 704217 + 1
# (x - 3729564) + (y - 3214899) = - 673116 - 1
# (x - 3036853) - (y - 3294727) = 661755 + 1
# (3735247 - x) + (y - 2533767) = 797597 + 1

# rearrange 1 and 2:
# x + y = 704217 + 1 + 3016889 + 2550239 = 6271346
# x - y = 661755 + 1 + 3036853 - 3294727 = 403882

#substitute:
# x = (403882 + 6271346) / 2 = 3337614
# y = 6271346 - 3337614 = 2933732

# check all four:
# (3337614 - 3016889) + (2933732 - 2550239) - 704217 - 1 = 0
# (3337614 - 3729564) + (2933732 - 3214899) + 673116 + 1 = 0
# (3337614 - 3036853) - (2933732 - 3294727) - 661755 - 1 = 0
# (3735247 - 3337614) + (2933732 - 2533767) - 797597 - 1 = 0

# answer as posed is then 4000000 * 3337614 + 2933732 = 13350458933732


